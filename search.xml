<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[搭建基于Hexo和Next主题和Github Pages个人博客教程]]></title>
    <url>%2Fposts%2F79fa710a%2F</url>
    <content type="text"><![CDATA[Hexo简介Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 Hexo搭建步骤安装Node.js官网下载 https://nodejs.org/en/download/ 装好后可以用命令查看版本号。 12345node -vv10.16.0npm -v6.9.0 安装Hexo123456789#安装Hexo脚手架npm install hexo-cli -g#初始化Blog，创建blog文件夹hexo init blogcd blog#安装依赖npm install 此时，文件下结构如下： 123456node_modules: 依赖包public：存放生成的页面scaffolds：生成文章的一些模板source：用来存放你的文章themes：主题_config.yml: 博客的配置文件 最后，运行程序，显示如下信息就可以访问http://localhost:4000 ，看到博客已经搭建成功了。 123hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 设置主目录下的_config.yml文件，里面有网站基本设置 12345678910111213#网站标题title: Hexo #网站副标题subtitle:#网站描述description:keywords:#作者名字author: John Doe#网站语言language:#时区timezone: 具体全部配置参考官方文档。 安装Next主题在博客文件夹下运行，安装完成后在themes下多了一个next文件夹 1git clone https://github.com/theme-next/hexo-theme-next themes/next 修改主目录下的_config.yml, 把theme替换成next 12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 打开主题配置文件打开thems/next/_config.yml 设置scheme外观样式12345# Schemes#scheme: Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白#scheme: Mist - Muse 的紧凑版本，整洁有序的单栏外观#scheme: Pisces - 双栏 Scheme，小家碧玉似的清新scheme: Gemini 选择对应的外观，刷新浏览器即可预览。 设置菜单123456789menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 当需要about、tags、categories 需要手动创建这个页面，如果不创建点击则不会出现相应页面。 使用如下命令创建这些文件夹 123hexo new page &quot;about&quot;hexo new page &quot;tags&quot;hexo new page &quot;categories&quot; 之后source文件夹下就会出现三个这样的文件夹。 设置头像1234567891011avatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: #/images/avatar.gif # If true, the avatar would be dispalyed in circle. rounded: false # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: false 修改字段 avatar， url值设置成头像的链接地址 开启打赏功能需要在主题配置文件中开启并填入微信和支付宝收款二维码图片地址 即可开启该功能 先生成微信和支付宝二维码图片，将图片放在themes/next/source/images下 微信: 右上角的+ 选择我要收款 保存相册 支付宝: 右上角的+ 选择我要收款 保存相册 123456789101112# Reward (Donate)reward_settings: # If true, reward would be displayed in every article by default. # You can show or hide reward in a specific article throuth `reward: true | false` in Front-matter. enable: true animation: false comment: 感谢您的支持将鼓励我继续创作！reward: wechatpay: /images/wechatpay.jpg alipay: /images/alipay.jpg #bitcoin: /images/bitcoin.png 设置tags 和 categories当菜单中有了 tags 和 categories 时，我们需要添加 type 属性 修改tags/index.md 12345---title: tagsdate: 2019-06-23 18:49:03type: &quot;tags&quot;--- 修改categories/index.md 12345---title: categoriesdate: 2019-06-23 18:49:14type: &quot;categories&quot;--- 安装插件插件汇总1234567891011121314151617181920212223242526272829# 更换Markdown渲染器npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save# 站内搜索插件npm install hexo-generator-searchdb --save# 网站访问速度优化插件npm install hexo-filter-optimize --save# 统计阅读文字字数npm install hexo-symbols-count-time --save# sitemap插件npm install hexo-generator-baidu-sitemap --savenpm install hexo-generator-sitemap --save# gulp 压缩插件npm install gulp --savenpm install gulp-clean-css --savenpm install gulp-htmlclean --savenpm install gulp-htmlmin --savenpm install gulp-imagemin --savenpm install gulp-uglify --save# git depploy 插件npm install hexo-deployer-git --save# 固定链接插件npm install hexo-abbrlink --save# -leancloud-counter安全插件，暂时未使用npm install hexo-leancloud-counter-security --save# valine 评论系统插件npm install valine --save# RSS插件npm install hexo-generator-feed --save 添加 Disqus 评论服务访问主页 https://disqus.com/，点击 GET STARTED 注册Disqus 选择 I want to install Disqus on my site 创建网站 Website Name 填写网站的名字 Shortname 网站在Disqus的唯一标识 Category：网站的类别，我这里创建的是技术类 订阅 订阅图上所示的 Free：针对小型，个人、非盈利性，不提供任何广告的网站。除了 Plus 中的 Direct Email Support，其他特性都支持。 修改配置文件 123456# Disqusdisqus: enable: true shortname: Shortname - 换成刚才设置的Shortname count: true lazyload: false 写博客hexo new “Hello World” 会在source目录下自动创建一个名为 Hello World.md 的文件，打开这个文件写文章就行了。 同样我们需要每篇文章指定一个或多个 tags 和 一个 categories。这样你的菜单中tags 页面 和categories页面就会有内容了。 1234567title: Hello Worlddate: 2019-06-29 22:55:51tags: - Hexo - NextCategories: - Hexo 部署到Github PagesGithub Pages 是 Github 公司提供的免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名。很多非常著名的公司和项目也都用这种方式来搭建网站，如微软和 twitter 的网站，还有 谷歌的 Material Design 图标 网站。 到 https://pages.github.com/ 上，看到可以创建的网站有两类，一类是为自己或者是自己的组织创建站点，就是新建一个仓库，仓库的名字叫做，username.github.io 或者是 orgnizationname.github.io ，注意这里的 username 和 orgnizationname 要严格替换成你自己的用户名或者组织名，大小写也要区分，不然就会有问题。然后就往仓库里面放页面内容就行了。第二类是为项目创建网站，这个其实主要步骤都是一样的，只不过稍微比创建用户或组织网站复杂一点点。 安装Git官网下载 https://gitforwindows.org/ 装好后可以用命令查看版本号 12git --versiongit version 2.22.0.windows.1 GitHub创建个人仓库登录or注册一个Github账号 New repository，新建仓库 创建一个和你用户名相同的仓库，用户名.github.io 创建SSH Key在命令行（即Git Bash）输入以下命令 1ssh-keygen -t rsa -C &quot;youremail&quot; 生成的Key在当前用户的.ssh文件夹下 12id_rsaid_rsa.pub 把公钥id_rsa.pub放在GitHub上，这样当你连接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 配置Git Bash12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱 查看是否配置成功 123ssh -T git@github.comWarning: Permanently added the RSA host key for IP address &apos;13.229.188.59&apos; to the list of known hosts.Hi slashgao! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 部署到GitHub先安装部署到Github的依赖 1npm install hexo-deployer-git --save 然后修改站点配置文件 _config.yml，找到deploy，修改为 YourgithubName为你的GitHub账户 1234deploy: type: git repository: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 生成及推送至Github 123456#清除已经生成的本地静态文件hexo clean#生成本地静态文件hexo generate#将本地静态文件推送至Githubhexo deploy 效果参考我的博客，打开浏览器，访问http://slashgao.github.io 基于Travis CI实现自动部署在使用 Hexo 写博客的时候，每次总是要使用 hexo deploy 将博客部署到 GitHub Pages，然后在把博客的源文件 push 到自己的 GitHub repository ，这就要求每次发布博客的时候要求搭建好Hexo环境。 有一个方便方法是引入Continuous Integration，简称 CI：意思是，在一个项目中，任何人对代码库的任何改动，都会触发 CI 服务器自动对项目进行构建，自动运行测试，自动编译，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成本随着时间的推移而增长，越早发现，修复成本越低。 Travis CI 是在线托管的 CI 服务，用 Travis 来进行持续集成，不需要自己搭服务器。 官网对使用 Travis CI 有详细的使用步骤： 前往 Travis-ci.com and Sign up with GitHub. 接受授权 选择你想要使用 Travis CI 的仓库 或者 你也可以在 Github-settings-Applications-TravisCI-Configure 中去更新配置； 在你仓库怎增加 .travis.yml 文件，这个文件定义了构建的步骤，例如安装依赖等等。 将 .travis.yml 文件推送到你的远端仓库，然后就会触发 Travis CI 构建； 登录 Travis CI然后选择你的仓库查看构建任务的执行详情； Job Lifecycle – Job 生命周期 Travis CI 为每种编程语言提供默认构建环境和默认的阶段集。 创建虚拟机为你的Job提供构建环境，将存储库克隆到其中，安装可选的插件，然后运行构建阶段。 job 的声明周期，主要包含两大部分： install：安装依赖，官网有专门讲解的 Installing Dependencies script：运行构建脚本；在 installation 阶段之前（beofore_install）、在 script phase 之前（before_script）或之后（after_script），你可以运行自定义命令；当构建成功或失败置换后，可以使用 after_success（例如构建文档）或 after_failure（例如上载日志文件）阶段执行其他操作（actions）。 在 after_failure 和 after_success 中，您可以使用 $TRAVIS_TEST_RESULT 环境变量获取构建结果。 完整的 job 生命周期(包括三个可选的部署阶段，以及在检出 git 存储库 和更改到存储库目录) 如下： 1234567891011apt addons 可选安装cache components 可选安装before_installinstallbefore_scriptscriptbefore_cache (for cleaning up cache) 可选after_success or after_failurebefore_deploy 可选deploy 可选after_deploy 可选after_script 配置Travis为了能够实现代码推送到 Github，需要在Github 生成一个 Persional access tokens，在 settings- Developer settings可以生成。 然后进入 Travis 中的项目设置界面，可以给具体的代码库进行设置，比如增加环境变量：主要加了一个环境变量 GITHUB_TOKEN，这个在后面的 .travis.yml 文件中会用到。 配置Github Repository之前的博客代码库只有一个 master 分支，存放的都是 hexo g 命令生成的静态文件。 现在改成把博客代码库放到dev分支，再由Travis CI 生成博客再部署到master分支上。 本地准备好博客代码库 新建一个dev分支： git checkout -b dev 添加 .travis.yml 文件 Travis CI 会执行用户定义的 .travis.yml 脚本。我想在这个脚本中实现：使用 Hexo 生成博客内容，再将博客内容部署到 YourgithubName.github.io 项目的 master 分支 上。 12345678910111213141516171819202122232425262728293031323334353637language: node_jsnode_js: stableenv: global: - GH_REF: github.com/YourgithubName/YourgithubName.github.io.gitbranchs: only: - devcache: directories: - node_modules# Start: Build Lifecyclebefore_install: - npm install -g hexo-cliinstall: - npm install#before_script:script: - hexo clean - hexo generateafter_script: - cd ./public - git init - git config user.name &quot;yourname&quot; - git config user.email &quot;youremail&quot; - git add . - git commit -m &quot;Update docs&quot; - git push --force --quiet &quot;https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master# End: Build LifeCycle 把主题文件下的 .git 目录删除，不然主题文件不会推送到Github 推送到Github1234567#查看当前branchgit branchgit add .#提交修改git commit -m &quot;init documents&quot;#推送到dev分支git push origin dev 此时在Travis CI中自动生成已启动，可以查看具体日志。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Github Pages</tag>
        <tag>Travis CI</tag>
      </tags>
  </entry>
</search>
